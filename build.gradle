import io.spring.gradle.dependencymanagement.DependencyManagementPlugin
import org.springframework.boot.gradle.plugin.SpringBootPlugin


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE")
    }
}

plugins {
    //id 'org.springframework.boot' version '2.4.0-M3'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'com.github.spotbugs' version '4.5.0'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
}

group = 'com.crio'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

apply plugin: SpringBootPlugin
apply plugin: DependencyManagementPlugin


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    

    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    
    // required for json layout
    //compile("com.fasterxml.jackson.core:jackson-core:2.9.8")
    //compile("com.fasterxml.jackson.core:jackson-annotations:2.9.8")
    //compile("com.fasterxml.jackson.core:jackson-databind:2.9.8")

    implementation "org.modelmapper:modelmapper:2.3.2"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation group: "javax.inject", name: "javax.inject", version: "1"
    implementation("org.springframework.boot:spring-boot-starter-actuator:2.1.4.RELEASE")
    //implementation "org.springframework.data:spring-data-redis:2.0.10.RELEASE"
    implementation group: "com.google.guava", name: "guava", version: "20.0"
    compileOnly "org.projectlombok:lombok"
    runtimeOnly "org.springframework.boot:spring-boot-devtools"
    annotationProcessor "org.projectlombok:lombok"
    



    testImplementation("org.mockito:mockito-junit-jupiter:2.22.0")
    testImplementation("org.springframework.boot:spring-boot-starter-test:2.1.4.RELEASE") {
        exclude group: "junit", module: "junit"
    }
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo"
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.3.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.3.1")
    testImplementation("org.junit.platform:junit-platform-launcher" +
            ":1.3.1")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.3.1")
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
}

checkstyle {
    toolVersion "7.8.1"
    configFile file("${rootProject.projectDir}/__CRIO__/checkstyle.xml")
}



spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
        toolVersion = "6.10.0"
        sourceSets = [sourceSets.main]
        ruleSetFiles = files("${rootProject.projectDir}/__CRIO__/ruleset.xml")
        ignoreFailures = true
    }

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}


test {
    
    useJUnitPlatform()
    testLogging.events ("STANDARD_ERROR")
    testLogging.events ("STANDARD_OUT")
    afterSuite { desc, result ->
    if (!desc.parent) {
        println "\nTEST RESULT: ${result.resultType}"
        println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
                "${result.successfulTestCount} SUCCEEDED, " +
                "${result.failedTestCount} FAILED, " +
                "${result.skippedTestCount} SKIPPED"
        }   
    }
    timeout = Duration.ofMinutes(15)
}
